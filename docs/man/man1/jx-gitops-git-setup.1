.TH "JX-GITOPS\-GIT\-SETUP" "1" "" "Auto generated by spf13/cobra" "" 
.nh
.ad l


.SH NAME
.PP
jx\-gitops\-git\-setup \- Sets up git to ensure the git user name and email is setup


.SH SYNOPSIS
.PP
\fBjx\-gitops git setup\fP


.SH DESCRIPTION
.PP
Sets up git to ensure the git user name and email is setup. This is typically used in a pipeline to ensure git can do commits.

.PP
The jx gitops git setup command ensures that we can authenticate with configured Git server by configuring the local credentials file in the home directory. This command tries to ensure the following things:

.RS
.IP \(bu 2
The user can be authenticated with Git provider (for example Github)
.br
.IP \(bu 2
An email is associated with each automated commit message
.br

.RE

.PP
These credentials are written to ${HOME}/git/credentials file, where the ${HOME} directory is determined as:

.RS
.IP \(bu 2
value stored in XGD CONFIG HOME environment variable or
.br
.IP \(bu 2
value stored in HOME environment variable or
.br
.IP \(bu 2
value stored in USERPROFILE environment variable or
.br
.IP \(bu 2
as current directory ./
.br

.RE

.PP
The credentials are determined by reading out the jx\-requirements.yaml from the cluster repository and jx\-boot Secret resource provisioned together with jx\-git\-operator in your Kubernetes namespace.

.PP
The Git username and email are preferentially determined from PipelineUser field from jx\-requirements.yaml, but if they are not available there then default email address jenkins\-x@googlegroups.com is used . If the username could not be determined from jx\-requirements.yaml, then it is determined from:

.RS
.IP \(bu 2
GIT \_USERNAME environment variable or
.br
.IP \(bu 2
GITHUB \_ACTOR environment variable
.br
.IP \(bu 2
In case that we are running in Kubernetes cluster from "username" field of the "jx\-boot" Secret provisioned with "jx\-git\-operator"
.br

.RE

.PP
The password for Github user (or a token for the robot account, depending on which you configued) is determined in similar fashion. Namely the token is first determined from environment variable GITHUB TOKEN, but if that fails, then further determination is dependent on execution environment of the command. Namely if it is running within Github actions, then the GITHUB TOKEN environment variable is our last stop. Otherwise if the command is executed within Kubernetes cluster, then the secret is determined by reading the password field of the "jx\-boot" Secret provisioned with the "jx\-git\-operator".


.SH OPTIONS
.PP
\fB\-\-credentials\-file\fP=""
    The destination of the git credentials file to generate. If not specified uses $XDG\_CONFIG\_HOME/git/credentials or $HOME/git/credentials

.PP
\fB\-d\fP, \fB\-\-dir\fP=""
    the directory to run the git setup command from

.PP
\fB\-e\fP, \fB\-\-email\fP=""
    the git user email to use if one is not setup. Default value is jenkins\-x@googlegroups.com, if none other is provided

.PP
\fB\-\-fake\-in\-cluster\fP[=false]
    for testing: lets you fake running this command inside a kubernetes cluster so that it can create the file: $XDG\_CONFIG\_HOME/git/credentials or $HOME/git/credentials

.PP
\fB\-\-git\-provider\fP=""
    the git provider URL. If not specified its detected from the git operator jx\-boot Secret or defaults to 
\[la]https://github.com\[ra]

.PP
\fB\-h\fP, \fB\-\-help\fP[=false]
    help for setup

.PP
\fB\-n\fP, \fB\-\-name\fP=""
    the git user name to use if one is not setup

.PP
\fB\-\-namespace\fP=""
    the namespace used to find the git operator secret for the git repository if running in cluster. Defaults to the current namespace

.PP
\fB\-\-operator\-namespace\fP="jx\-git\-operator"
    the namespace used by the git operator to find the secret for the git repository if running in cluster

.PP
\fB\-\-password\fP=""
    the git password/token to use. if not specified it is detected from the git operator Secret

.PP
\fB\-\-secret\fP="jx\-boot"
    the name of the Secret to find the git URL, username and password for creating a git credential if running inside the cluster


.SH EXAMPLE
.PP
jx\-gitops git setup


.SH SEE ALSO
.PP
\fBjx\-gitops\-git(1)\fP


.SH HISTORY
.PP
Auto generated by spf13/cobra
