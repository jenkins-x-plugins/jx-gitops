.TH "JX-GITOPS\-HASH" "1" "" "Auto generated by spf13/cobra" "" 
.nh
.ad l


.SH NAME
.PP
jx\-gitops\-hash \- Annotates the given files with a hash of the given source files for ConfigMaps/Secrets


.SH SYNOPSIS
.PP
\fBjx\-gitops hash\fP


.SH DESCRIPTION
.PP
Annotates the given files with a hash of the given source files for ConfigMaps/Secrets


.SH OPTIONS
.PP
\fB\-a\fP, \fB\-\-annotation\fP="jenkins\-x.io/hash"
    the annotation for the hash to add to the files

.PP
\fB\-d\fP, \fB\-\-dir\fP="."
    the directory to recursively look for the *.yaml or *.yml files

.PP
\fB\-h\fP, \fB\-\-help\fP[=false]
    help for hash

.PP
\fB\-k\fP, \fB\-\-kind\fP=[Deployment]
    adds Kubernetes resource kinds to filter on to annotate. For kind expressions see: 
\[la]https://github.com/jenkins-x-plugins/jx-gitops/tree/master/docs/kind_filters.md\[ra]

.PP
\fB\-\-kind\-ignore\fP=[]
    adds Kubernetes resource kinds to exclude. For kind expressions see: 
\[la]https://github.com/jenkins-x-plugins/jx-gitops/tree/master/docs/kind_filters.md\[ra]

.PP
\fB\-p\fP, \fB\-\-pod\-spec\fP[=false]
    annotate the PodSpec in spec.templates.metadata.annotations rather than the top level annotations

.PP
\fB\-s\fP, \fB\-\-source\fP=[]
    the source files to hash


.SH EXAMPLE
.PP
# annotates the Deployments in a dir from some source ConfigMaps
  jx\-gitops hash \-s foo/configmap.yaml \-s another/configmap.yaml \-d someDir


.SH SEE ALSO
.PP
\fBjx\-gitops(1)\fP


.SH HISTORY
.PP
Auto generated by spf13/cobra
